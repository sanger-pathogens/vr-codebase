#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;
use Utils;

my $runner = myRunner->new();
$runner->run();

exit;

#--------------------------------

package myRunner;
use base qw(Runner);
use strict;
use warnings;

sub new
{
    my ($class,@args) = @_;
    my $self = $class->SUPER::new(@args);

    $$self{do_clean} = 1;
    $$self{limits} = { runtime=>24*60 };
    $$self{debug_chunks} = 0;
    $$self{merge_pops} = 0;
    $$self{whole_genome_bams} = 1;
    $$self{_sampleconf} = q[
            # Add -P ILLUMINA or -P SLX if the BAMs contain also reads from different platforms. 
            #   The options -m2 -F0.0005 are intended for hundred of samples, go with the mpileup's
            #   defaults if you don't have that many.
            mpileup  => 'samtools mpileup -EDS -C50 -m2 -F0.0005 -d 10000',
            bcftools => 'bcftools view -p 0.99 -vcgN',
            
            bams     => '/lustre/scratch105/projects/g1k/MAIN-ANALYSIS/20101123-whole-genome-calling/merge_across_bams.list',
            fa_ref   => '/lustre/scratch105/projects/g1k/ref/main_project/human_g1k_v37.fasta',
            mysql    => 'mysql -sN -uXXX -pXXX -hmcs4a -P 3306 g1k_meta',   # To get the sex. Optional when assumed_sex or sample_list is defined below.

            limits   => { runtime=>24*60 },
            do_clean => 1,         # Remove runner's temporary files

            ploidy   =>
            {
                default => 2,
                X =>
                [
                    # These are pseudoautosomal: 60001-2699520, 154931044-155270560, call with ploidy 2
                    { region=>'1-60000', M=>1 },
                    { region=>'2699521-154931043', M=>1 },
                ],
                Y =>
                [
                    # No chrY in females and one copy in males
                    { region=>'1-59373566', M=>1, F=>0 },
                ],
            },
            
            chroms => [ qw(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X Y) ],
            pops   =>
            {
                # With no populations, at least 'pooled' must be given
                pooled => [ '.' ],
            
                # The population groups can be defined either as BAM file name substrings (attempted first)
                #   or, if none of the regex finds a matching BAM, as a list of samples.
                AMR => [ qw(MXL CLM PUR) ],
                AFR => [ qw(YRI LWK ASW) ],
                ASN => [ qw(CHB CHS JPT) ],
                EUR => [ qw(CEU TSI FIN GBR IBS) ],
            },

            # Do not merge population VCFs into one VCF. The merged set can find more rare variants
            #   than the pooled set.
            merge_pops => 0,
            
            # Set the depth filter (+/D=N) to about twice the average depth.
            filter => 'vcf-annotate --fill-AC-AN -f +',
            
            chunk_size        => 1_000_000,
            debug_chunks      => 0,
            shuffle_chunks    => 0,         # Process chunks in random order to randomize disk access
            keep_bcfs         => 1,
            chunks_overlap    => 0,
            whole_genome_bams => 1,         # Set to 0 if BAMs are splitted by chromosome. In such a case, the bams must contain '*chrom$chr.' in the name.
            assumed_sex       => undef,     # Set to 'F' for females, 'M' males and undef mysql key above if the DB shouldn't be used.
            sample_list       => undef,     # Provide list of samples with sex. In this case, neither mysql nor assumed_sex keys are required.

            # Do specific regions only (whitespace delimited file with the columns CHR,FROM,TO)
            #   regions => 'regions.list',

            # Chunk-specific options will be applied to chunks with a non-zero overlap
            #   chunk_options => { 
            #       '10:42000001-43000000' => { mpileup=>'...'  } 
            #   },

    ]."\n";

    $$self{usage} .= 
        "Usage: run-mpileup\n" .
        "Options:\n" .
        "   -c, --clean             Clean all temporary files\n" .
        "   -m, --mrProper          Clean all temporary files, including the population directories and BCFs, leaving only toplevel VCFs\n" .
        "   -o, --outdir <dir>      Output directory\n" .
        "\n";

    return $self;
}

sub parse_args
{
    my ($self) = @_;
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-c' or $arg eq '--clean' ) { $$self{clean}=1; next; }
        if ( $arg eq '-m' or $arg eq '--mrProper' ) { $$self{mrProper}=1; next; }
        if ( $arg eq '-o' or $arg eq '--outdir' ) { $$self{outdir}=shift(@ARGV); next; }
        $self->throw();
    }
    if ( !exists($$self{outdir}) ) { $self->throw("Expected -o option."); }

    # This lengthy code checks if mandatory parameters are present and fills the defaults issuing warnings when doing so.
    if ( !exists($$self{bams}) ) { $self->throw("The 'bams' config key not present\n"); }
    if ( !exists($$self{mysql}) && !$$self{assumed_sex} && !$$self{sample_list} ) { $self->throw("None of the config keys 'mysql', 'assumed_sex' or 'sample_list' present\n"); }
    if ( !exists($$self{chroms}) ) 
    { 
        $$self{chroms} = [ qw(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X Y) ];
        $self->warn("The 'chroms' config key not present, assuming: ".join(' ',@{$$self{chroms}})."\n"); 
    }
    if ( !exists($$self{pops}) ) 
    { 
        # 'pooled' must be always present
        $$self{pops} = { pooled => [ '.' ] };
        $self->warn("The 'pops' config key not present, assuming: pooled => [ '.' ]\n"); 
    }
    if ( !exists($$self{fa_ref}) ) 
    { 
        $$self{fa_ref} = '/lustre/scratch105/projects/g1k/ref/main_project/human_g1k_v37.fasta';
        $self->warn("The 'fa_ref' config key not present, assuming: $$self{fa_ref}\n"); 
    }
    if ( !exists($$self{ploidy}) ) 
    { 
        $$self{ploidy} = 
        {
            default => 2,
            X => 
            [
                # These are pseudoautosomal: 60001-2699520, 154931044-155270560, call with ploidy 2
                { region=>'1-60000', M=>1 },
                { region=>'2699521-154931043', M=>1 },
            ],
            Y =>
            [
                # No chrY in females and one copy in males
                { region=>'1-59373566', M=>1, F=>0 },
            ],
        };
        $self->warn("The 'ploidy' config key not present, check the code for assumed ploidy and pseudoautosomal regions\n"); 
    }
    if ( !exists($$self{mpileup}) ) 
    { 
        $$self{mpileup} = 'samtools mpileup -DS -C50 -m2 -F0.0005 -d 10000';
        $self->warn("The 'mpileup' config key not present, assuming: $$self{mpileup}\n"); 
    }
    if ( !exists($$self{bcftools}) ) 
    { 
        $$self{bcftools} = 'bcftools view -p 0.99 -vcgN';
        $self->warn("The 'bcftools' config key not present, assuming: $$self{bcftools}\n"); 
    }
    if ( !exists($$self{chunk_size}) ) 
    { 
        $$self{chunk_size} = 1_000_000;
        $self->warn("The 'chunk_size' config key not present, assuming: $$self{chunk_size}\n"); 
    }
    if ( !exists($$self{chunks_overlap}) ) 
    { 
        $$self{chunks_overlap} = 0;
        $self->warn("The 'chunks_overlap' config key not present, assuming: $$self{chunks_overlap}\n"); 
    }
    if ( !exists($$self{keep_bcfs}) ) 
    { 
        $$self{keep_bcfs} = 1;
        $self->warn("The 'keep_bcfs' config key not present, assuming: $$self{keep_bcfs}\n"); 
    }
    if ( !exists($$self{filter}) )
    {
        $$self{filter} = 'vcf-annotate --fill-AC-AN -f +';
        $self->warn("The 'filter' config key not present, assuming: $$self{filter}\n"); 
    }
    if ( $$self{clean} ) 
    { 
        $self->clean($$self{outdir});
        $self->all_done;
    }
    if ( $$self{mrProper} )
    {
        $self->mrProper($$self{outdir});
        $self->all_done;
    }
}

sub main
{
    my ($self) = @_;
    $self->parse_args();

    my $outdir = $$self{outdir};
    my @chroms = @{$$self{chroms}};

    if ( $self->is_finished("$outdir/all_done") ) { $self->all_done; }
    if ( !$self->is_finished("$outdir/sanity_checked") ) { $self->check_sanity; }

    # Create sample list for each population group
    while (my ($pop,$value) = each %{$$self{pops}})
    {
        for my $chr (@chroms)
        {
            my $bams_outfile    = "$outdir/lists/chr$chr-$pop.list";
            my $samples_outfile = "$outdir/lists/chr$chr-$pop.samples";
            if ( !$self->is_finished($bams_outfile) )
            {
                $self->population_group_bams_list($bams_outfile,$$self{bams},$chr,$value, $samples_outfile);
            }
            if ( !$self->is_finished($samples_outfile) )
            {
                $self->sample_list($samples_outfile,$bams_outfile);
            }
        }
    }

    # Run mpileup for each population and chunk: first all sites BCFs if requested and then call variants
    my $chunks = $self->get_chunks;

    $self->set_limits(%{$$self{limits}}) unless !exists($$self{limits});
    if ( scalar keys %{$$self{pops}} > 1 ) { $$self{keep_bcfs} = 1; }
    if ( $$self{keep_bcfs} )
    {
        for my $chunk (@$chunks)
        {
            my $chr  = $$chunk{chr};
            my $from = $$chunk{from};
            my $to   = $$chunk{to};
            $self->spawn('all_sites_bcf',"$outdir/pooled/$chr/$chr:$from-$to.bcf",'pooled',$chunk);
        }
        $self->wait;
    }

    # Call the variants
    for my $pop (keys %{$$self{pops}})
    {
        for my $chunk (@$chunks)
        {
            my $chr  = $$chunk{chr};
            my $from = $$chunk{from};
            my $to   = $$chunk{to};
            $self->spawn('run_mpileup',"$outdir/$pop/$chr/$chr:$from-$to.vcf.gz",$pop,$chunk);
        }
    }
    $self->wait;
    $self->set_limits(runtime=>undef);

    # Create the merged set if there are more population groups (pooled + two others)
    if ( $$self{merge_pops} && scalar keys %{$$self{pops}} > 2 )
    {
        for my $chunk (@$chunks)
        {
            my $chr  = $$chunk{chr};
            my $from = $$chunk{from};
            my $to   = $$chunk{to};
            my @vcfs = ();
            for my $pop (keys %{$$self{pops}})
            {
                if ( $pop eq 'pooled' ) { next; }
                push @vcfs, "$outdir/$pop/$chr/$chr:$from-$to.vcf.gz";
            }
            $self->spawn('merge_vcfs',"$outdir/merged/$chr/$chr:$from-$to.vcf.gz","$outdir/pooled/$chr/$chr:$from-$to.bcf",\@vcfs);
        }

        # Work with the merged set only from now (otherwise comment the next line)
        delete($$self{pops});
        $$self{pops}{merged} = 1;
    }
    $self->wait;

    # Concat chunks into chromosomes and apply filtering
    for my $pop (keys %{$$self{pops}})
    {
        for my $chr (@chroms)
        {
            $self->spawn('concat_vcfs',"$outdir/$pop/$chr.vcf.gz",$pop,$chr,$chunks);
        }
    }
    $self->wait;

    # Create whole genome file: concat all chromosomes
    for my $pop (keys %{$$self{pops}})
    {
        $self->spawn('concat_chroms',"$outdir/$pop.vcf.gz",$pop);
    }
    $self->wait;

    # Run summary stats
    for my $pop (keys %{$$self{pops}})
    {
        $self->spawn('vcf_stats',"$outdir/$pop.vcf.gz.stats","$outdir/$pop.vcf.gz",q[awk '/^#/||$7=="PASS"']);
        $self->spawn('apply_filter',"$outdir/$pop.filt.vcf.gz","$outdir/$pop.vcf.gz");
    }
    $self->wait;

    # Run performance stats and clean
    $self->spawn('runtime_stats',"$outdir/runtime");
    $self->wait;
    $self->clean($outdir) unless !$$self{do_clean};

    $self->cmd("touch $outdir/all_done");
    $self->all_done;
}

sub mrProper
{
    my ($self,$outdir) = @_;
    for my $pop (keys %{$$self{pops}})
    {
        $self->cmd("rm -rf $outdir/$pop");
    }
    $self->clean($outdir);
}

sub clean
{
    my ($self,$outdir) = @_;
    $self->SUPER::clean($outdir);
    my $chunks = $self->get_chunks;
    for my $pop (keys %{$$self{pops}})
    {
        for my $chunk (@$chunks)
        {
            my $chr  = $$chunk{chr};
            my $from = $$chunk{from};
            my $to   = $$chunk{to};
            for my $suffix qw(samples vcf.gz vcf.gz.tbi)
            {
                my $file = "$outdir/$pop/$chr/$chr:$from-$to.$suffix";
                unlink($file) unless !-e $file;
            }
        }
    }
}

sub runtime_stats
{
    my ($self,$outfile) = @_;
    $self->cmd("mkdir -p $outfile.part");
    $self->cmd("runtime-stats $$self{outdir} -p $outfile.part/graph > $outfile.part/stats.txt");
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub cmd
{
    my ($self,$cmd) = @_;
    return Utils::CMD($cmd,{verbose=>$$self{_verbose}});
}

sub check_sanity
{
    my ($self) = @_;

    # Check that the -P option corresponds to PL in the BAMs
    if ( !($$self{mpileup}=~/-\S*P\s+(\S+)/) ) { return; }
    my %pl = map { $_=>1 } split(/,/,$1);
    my %bam_pls = ();

    open(my $fh,'<',$$self{bams}) or $self->throw("$$self{bams}: $!");
    while (my $bam=<$fh>)
    {
        chomp($bam);
        my @rgs = `samtools view -H $bam | grep ^\@RG`;
        for my $rg (@rgs)
        {
            if ( !($rg=~/\tPL:(\S+)/) ) { next; }
            $bam_pls{$1} = 1;
        }
    }
    close($fh);

    for my $pl (keys %pl)
    {
        if ( !exists($bam_pls{$pl}) ) { $self->throw("The platform \"$pl\" not present in any of the BAMs.\n"); }
    }
    `mkdir -p $$self{outdir}`;
    $self->cmd("touch $$self{outdir}/sanity_checked");
}

sub open_file
{
    my ($self,$file) = @_;
    if ( ($file=~m{^(.+)/[^/]+$}) && ! -d $1 ) { $self->cmd("mkdir -p $1"); }
    open(my $fh,'>',$file) or $self->throw("$file: $!");
    return $fh;
}

sub population_group_bams_list
{
    my ($self,$outfile,$bam_list,$chr,$pops,$samples_fname) = @_;

    open(my $in,'<',$bam_list) or $self->throw("$bam_list: $!");
    my $out = $self->open_file("$outfile.part");
    my $printed = 0;
    while (my $line=<$in>)
    {
        # If the BAMs are split by chr, we are applying to regex's to select by chromosome
        #   and by the population name. Otherwise, only population regex is used.
        if ( !$$self{whole_genome_bams} && !($line=~/chrom$chr\./) ) { next; }
        for my $pop (@$pops)
        {
            if ( !($line=~/$pop/) ) { next; }
            print $out $line;
            $printed = 1;
            last;
        }
    }
    close($in) or $self->throw("close $bam_list");

    if ( !$printed )
    { 
        # No BAM was identified. In that case, the population should be interpreted as
        #   sample name regex's. Read BAM headers and find out the exact sample names and
        #   list of BAMs. The regex may cause problems in future, this may be replaced by
        #   an exact match in find_bams_with_samples.
        #
        my ($bams,$samples) = $self->find_bams_with_samples($bam_list,$pops);
        if ( !@$bams ) 
        { 
            if ( !$$self{whole_genome_bams} ) 
            {
                $self->throw("The BAMs not named as chrom$chr.bam, please unset the whole_genome_bams config key\n");
            }
            $self->throw("No matching BAM found for chr$chr; searched in file names (/chrom$chr\\./) and sample names: ",join(',',@$pops),"\n"); 
        }
        print $out join("\n", @$bams), "\n";
        close($out) or $self->throw("close $outfile.part");

        if ( defined $$self{sample_list} )
        {
            $self->cmd("cp $$self{sample_list} $samples_fname");
            undef $out;
        }
        else 
        {
            $out = $self->open_file($samples_fname);
            my $sexes = $self->get_sample_sex(@$samples);
            for my $sample (sort keys %$sexes)
            {
                print $out "$sample\t$$sexes{$sample}\n";
            }
        }
    }
    if ( defined $out ) { close($out) or $self->throw("close $samples_fname"); }

    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

# Returns list of BAMs and samples which match the regex's from the sample_list
sub find_bams_with_samples
{
    my ($self,$bam_list,$sample_list) = @_;

    my (%bams,%samples);

    open(my $in,'<',$bam_list) or $self->throw("$bam_list: $!");
    while (my $bam=<$in>)
    {
        chomp($bam);

        open(my $rgs,"samtools view -H $bam |") or $self->throw("samtools view -H $bam: $!");
        while (my $rg=<$rgs>)
        {
            if ( !($rg=~/^\@RG/) ) { next; }
            if ( !($rg=~/SM:(\S+)/) ) { next; }
            my $sample = $1;
            for my $re (@$sample_list)
            {
                if ( ($sample=~/$re/) ) 
                { 
                    $bams{$bam} = 1;
                    $samples{$sample} = 1;
                    last;
                }
            }
        }
        close($rgs);
    }
    close($in);

    my @bams = sort keys %bams;
    my @samples = sort keys %samples;
    return (\@bams,\@samples);
}

sub get_sample_sex
{
    my ($self,@samples) = @_;
    my $sexes;
    for my $sample (@samples)
    {
        my $sex;
        if ( !$$self{mysql} ) { $sex = $$self{assumed_sex}; }
        else
        {
            my @sex = $self->cmd(qq[$$self{mysql} -e 'SELECT sex FROM individual WHERE name="$sample"']);
            if ( !@sex ) { $self->throw("No info for $sample?\n"); }
            $sex = $sex[0];
            chomp($sex);
        }
        if ( !($sex=~/^[MF]$/) ) { $self->throw("Neither male nor female? Expected 'F' or 'M', got '$sex'."); }
        $$sexes{$sample} = $sex;
    }
    return $sexes;
}

sub sample_list
{
    my ($self,$outfile,$bams) = @_;

    if ( defined $$self{sample_list} )
    {
        $self->cmd("cp $$self{sample_list} $outfile");
        return;
    }

    my %samples;

    # Now fill the ploidy information
    open(my $in,'<',$bams) or $self->throw("$bams: $!");
    while (my $bam=<$in>)
    {
        chomp($bam);

        open(my $rgs,"samtools view -H $bam |") or $self->throw("samtools view -H $bam: $!");
        while (my $rg=<$rgs>)
        {
            if ( !($rg=~/^\@RG/) ) { next; }
            if ( $rg=~/SM:(\S+)/ ) { $samples{$1}=1; }
        }
        close($rgs);
    }
    close($in);

    open(my $out,'>',"$outfile.part") or $self->throw("$outfile.part: $!");
    my $sexes = $self->get_sample_sex(keys %samples);
    for my $sample (sort keys %samples)
    {
        print $out "$sample\t$$sexes{$sample}\n";
    }
    close($out) or $self->throw("close $outfile.part");

    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub get_chunks
{
    my ($self) = @_;

    my $regions = $$self{regions} ? $self->read_regions($$self{regions}) : $self->read_fai("$$self{fa_ref}.fai",$$self{chroms});

    my @chunks;
    for my $region (@$regions)
    {
        my $pos     = $$region{from};
        my $end_pos = $$region{to};
        while ($pos<$end_pos)
        {
            my $from = $pos;
            my $to   = $from+$$self{chunk_size}-1;

            if ( $to>$end_pos ) { $to=$end_pos; }

            push @chunks, { chr=>$$region{chr}, from=>$from, to=>$to };

            $pos += $$self{chunk_size} - $$self{chunks_overlap};
            if ( $pos<1 ) { $self->throw("The split size too small [$$self{chunk_size}]?\n"); }

            if ( $$self{debug_chunks} && scalar @chunks>=$$self{debug_chunks} ) { return \@chunks; }
        }
    }

    if ( $$self{shuffle_chunks} )
    {
        use Math::Random;
        random_set_seed_from_phrase(1,1);
        @chunks = random_permutation(@chunks);
    }

    return \@chunks;
}

sub read_regions
{
    my ($self,$file) = @_;
    open(my $fh,'<',$file) or $self->throw("$file: $!"); 
    my @regions;
    while (my $line=<$fh>)
    {
        chomp($line);
        if ( !($line=~/^(\S+)\s+(\d+)\s+(\d+)\s*$/) ) { $self->throw("Could not parse the regions file $file: [$line]"); }
        push @regions, { chr=>$1, from=>$2, to=>$3 };
    }
    return \@regions;
}

sub read_fai
{
    my ($self,$fai,$regexs) = @_;

    # Determine the chromosomes and their lengths
    open(my $fh,'<',$fai) or $self->throw("$fai: $!"); 
    my @chr_lengths;
    while (my $line=<$fh>)
    {
        my ($chr,$from,$to);
        for my $regex (@$regexs)
        {
            if ( !($line=~/^($regex)\t(\d+)/i) ) { next; }
            $chr  = $1;
            $from = 1;
            $to   = $2;
            last;
        }
        if ( !defined $chr ) { next; }
        if ( !exists($$self{ploidy}{$chr}) ) 
        {
            push @chr_lengths, { chr=>$chr, from=>$from, to=>$to };
            next;
        }

        # Split the chunks as necessary
        for my $reg (@{$$self{ploidy}{$chr}})
        {
            my ($start,$end) = split(/-/,$$reg{region});
            if ( $start>$from )
            {
                push @chr_lengths, { chr=>$chr, from=>$from, to=>$start-1 };
            }
            push @chr_lengths, { chr=>$chr, from=>$start, to=>$end };
            $from = $end+1;
        }
        if ( $from<$to )
        {
            push @chr_lengths, { chr=>$chr, from=>$from, to=>$to };
        }
    }
    close($fh);
    return \@chr_lengths;
}

sub ploidy_defaults
{
    my ($self,$chr,$from,$to) = @_;
    my $mploidy = $$self{ploidy}{default};
    my $fploidy = $$self{ploidy}{default};
    if ( !exists($$self{ploidy}{$chr}) ) { return ($mploidy,$fploidy); }
    for my $reg (@{$$self{ploidy}{$chr}})
    {
        my ($start,$end) = split(/-/,$$reg{region});

        # Require at least one end to be within the interval
        if ( $from>=$start && $from<=$end or $to>=$start && $to<=$end )
        {
            if ( exists($$reg{M}) ) { $mploidy=$$reg{M}; }
            if ( exists($$reg{F}) ) { $fploidy=$$reg{F}; }
            return ($mploidy,$fploidy);
        }
    }
    return ($mploidy,$fploidy);
}

sub set_chunk_options
{
    my ($self,$chr,$from,$to) = @_;
    if ( !exists($$self{chunk_options}) ) { return; }
    my $hit;
    for my $chunk (keys %{$$self{chunk_options}})
    {
        if ( !($chunk=~/^([^:]+):(\d+)-(\d+)$/) ) { $self->throw("Could not parse the chunk_options: [$chunk]"); }
        if ( $chr ne $1 ) { next; }
        if ( $2>$to ) { next; }
        if ( $3<$from ) { next; }
        $hit = $chunk;
        last;
    }
    if ( !defined $hit )
    {
        if ( exists($$self{ori_chunk_options}) ) 
        {
            $self->set_options($$self{ori_chunk_options},$self);
        }
        return;
    }
    if ( !exists($$self{ori_chunk_options}) )
    {
        $$self{ori_chunk_options} = {};
        $self->set_options($self,$$self{ori_chunk_options},keys %{$$self{chunk_options}{$hit}});
    }
    $self->set_options($$self{chunk_options}{$hit},$self);
}

sub set_options
{
    my ($self,$src,$tgt,@keys) = @_;
    if ( !scalar @keys ) { @keys = keys %$src }
    for my $key (@keys)
    {
        $$tgt{$key} = $$src{$key};
    }
}

sub all_sites_bcf
{
    my ($self,$outfile,$pop,$chunk) = @_;

    my $chr  = $$chunk{chr};
    my $from = $$chunk{from};
    my $to   = $$chunk{to};

    $self->set_chunk_options($chr,$from,$to);

    my $outdir = $$self{outdir};
    my $bam_list = "$outdir/lists/chr$chr-$pop.list";

    `mkdir -p $outdir/$pop/$chr/` unless -d "$outdir/$pop/$chr";
    my $cmd = "$$self{mpileup} -g -r $chr:$from-$to -b $bam_list -f $$self{fa_ref} > $outfile.part";
    $self->cmd($cmd);

    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

# This should be renamed to e.g. 'call_variants', the subroutine name is no longer accurate and rather confusing...
sub run_mpileup
{
    my ($self,$outfile,$pop,$chunk) = @_;

    my $outdir = $$self{outdir};
    my $chr  = $$chunk{chr};
    my $from = $$chunk{from};
    my $to   = $$chunk{to};

    $self->set_chunk_options($chr,$from,$to);

    `mkdir -p $outdir/$pop/$chr/` unless -d "$outdir/$pop/$chr";

    # Create sample list with correct ploidy info
    my $sample_list = "$outdir/$pop/$chr/$chr:$from-$to.samples";
    if ( !$self->is_finished($sample_list) )
    {
        my ($mploidy,$fploidy) = $self->ploidy_defaults($chr,$from,$to);
        open(my $in,'<',"$outdir/lists/chr$chr-$pop.samples") or $self->throw("$outdir/lists/chr$chr-$pop.samples: $!");
        open(my $out,'>',$sample_list) or $self->throw("$sample_list: $!");
        while (my $line=<$in>)
        {
            if ( !($line=~/^(\S+)\s+([MF])$/) ) { chomp($line); $self->throw("Could not parse [$outdir/lists/chr$chr-$pop.samples]: [$line]\n"); }
            if ( $2 eq 'M' && !$mploidy ) { next; }
            if ( $2 eq 'F' && !$fploidy ) { next; }
            print $out "$1\t" .($2 eq 'M' ? $mploidy : $fploidy). "\n";
        }
        close($out) or $self->throw("close failed: $sample_list");
        close($in) or $self->throw("close failed: $outdir/lists/chr$chr-$pop.samples");
    }

    my $cmd;
    if ( $$self{keep_bcfs} )
    {
        $cmd = "$$self{bcftools} -s $sample_list $outdir/pooled/$chr/$chr:$from-$to.bcf";
    }
    else
    {
        my $bam_list = "$outdir/lists/chr$chr-$pop.list";
        $cmd = "$$self{mpileup} -ug -r $chr:$from-$to -b $bam_list -f $$self{fa_ref} | $$self{bcftools} -s $sample_list -";
    }
    $self->cmd("$cmd | bgzip -c > $outfile.part");
    $self->tabix_part($outfile);
}

sub tabix_part
{
    my ($self,$vcf) = @_;
    $self->cmd("tabix -p vcf -f $vcf.part");
    rename("$vcf.part.tbi","$vcf.tbi");
    rename("$vcf.part",$vcf);
}

sub merge_vcfs
{
    my ($self,$outfile,$bcf,$vcfs) = @_;

    # List of all sites. Use awk, grep has the peculiar property of exiting with error status when no lines are printed
    #   through -v
    $self->cmd(q[vcf-isec -f -n +1 ] .join(' ',@$vcfs). q[ | awk '!($1~/^#/)' | cut -f 1,2 | uniq > ] . "$outfile.sites");

    # Call genotypes for all samples at these positions
    $self->cmd("$$self{bcftools} -l $outfile.sites $bcf | bgzip -c > $outfile.part");

    $self->tabix_part($outfile);
}

sub concat_vcfs
{
    my ($self,$outfile,$pop,$chr,$chunks) = @_;

    my $outdir = $$self{outdir};
    my $chunks_list = "$outdir/$pop/$chr/concat.list";

    open(my $fh,'>',$chunks_list) or $self->throw("$chunks_list: $!");
    for my $chunk (sort { $$a{from}<=>$$b{from} } @$chunks)
    {
        if ( $$chunk{chr} ne $chr ) { next; }
        my $from = $$chunk{from};
        my $to   = $$chunk{to};
        print $fh "$outdir/$pop/$chr/$chr:$from-$to.vcf.gz\n";
    }
    close($fh) or $self->throw("close $chunks_list");

    my $filter = $$self{filter} ? "| $$self{filter}" : '';
    $self->cmd("vcf-concat -f $chunks_list $filter | bgzip -c > $outfile.part");
    $self->tabix_part($outfile);
}

sub concat_chroms
{
    my ($self,$outfile,$pop) = @_;

    my $outdir = $$self{outdir};
    my $chunks_list = "$outdir/$pop/concat.list";

    open(my $fh,'>',$chunks_list) or $self->throw("$chunks_list: $!");
    for my $chr (@{$$self{chroms}})
    {
        print $fh "$outdir/$pop/$chr.vcf.gz\n";
    }
    close($fh) or $self->throw("close $chunks_list");

    $self->cmd("vcf-concat -p -f $chunks_list | $$self{filter} | bgzip -c > $outfile.part");
    $self->tabix_part($outfile);
}

sub vcf_stats
{
    my ($self,$outfile,$vcf,$filter) = @_;
    my $cmd = "zcat $vcf | " .(defined $filter ? "$filter |" : ''). "vcf-stats -s - -p $outfile.part/stats";
    $self->cmd($cmd);
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub apply_filter
{
    my ($self,$outfile,$vcf) = @_;
    $self->cmd(qq[zcat $vcf | awk '/^#/||\$7=="PASS"' | bgzip -c > $outfile.part]);
    $self->tabix_part($outfile);
}


