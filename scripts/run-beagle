#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;
use Utils;

my $runner = myRunner->new();
$runner->run();

exit;

#--------------------------------

package myRunner;
use base qw(Runner);
use strict;
use warnings;

sub new
{
    my ($class,@args) = @_;
    my $self = $class->SUPER::new(@args);

    $$self{do_clean} = 1;
    $$self{debug_chunks} = 0;
    $$self{limits} = { memory=>5_000, runtime=>24*60 };
    $$self{vcf_beagle}  = 'vcf-beagle';
    $$self{beagle_args} = '';
    $$self{java_args} = '';
    $$self{phased_join_args} = '';
    $$self{memstep} = 2_000;
    $$self{config_version} = '1349789206';
    $$self{_sampleconf} = q[
            # For sanity checking that your config file is not obsolete. Update the version key in your 
            #  config file to get rid of the warnings.
            version  => '] .$$self{config_version}. q[',

            beagle_jar  => '/nfs/users/nfs_p/pd3/sandbox/svn/beagle/beagle.jar',
            beagle_args => '',
            java_args   => '',
            vcf_beagle  => 'vcf-beagle',

            # The known_vcf (aka -k) and in_vcf (aka -i) file names can contain the string "{CHROM}" which will be expanded 
            #   according to chromosomes listed in the "region" key below. If the key is not defined, glob expansion will
            #   be used to obtain the chromosomes. The VCFs must be tabix indexed.
            # When known_vcf is set, consider also setting the chunk_by_known key.
            #
            # in_vcf     => '/some/path/chr{CHROM}.vcf.gz',
            # known_vcf  => '/nfs/users/nfs_p/pd3/sandbox/impute2/dec-chr20/Omni25_genotypes_1212_samples_v2.b37.vcf.gz',
            # known_is_phased => 0,

            # Number of sites per chunk and in buffer regions. The total number of sites considered is buffer_nsites+chunk_nsites.
            #   The chunks are determined based on the input VCF (-i) unless chunk_by_known is set. 
            buffer_nsites  => 5_000,
            chunk_nsites   => 10_000,
            chunk_by_known => 0,

            # Create whole-genome VCF? This can produce *huge* files for thousands of samples
            merge_chroms   => 0,

            # Regions to impute, the chunks must be sorted by chromosomal position or else the resulting VCF will not
            #   be sorted. By default, the whole VCF is imputed.
            # region => [ '1:159000000-161000000', '1:62000000-64000000', '2' ],

            limits   => { memory=>10_000, runtime=>24*60 },
            # How much memory should be given to Beagle in the next run if it fails because of out-of-memory error?
            #   Smaller step saves farm node's memory but can result in multiple runs (note that it can take
            #   considerable amount of CPU time before the memory is exhausted). On the other hand, bigger step may 
            #   block free CPUs on multi-core nodes by reserving too much memory.
            memstep  => '] .$$self{memstep}. q[',   # the step for increasing memory limit

            do_clean => 1,         # Remove runner's temporary files
    ]."\n";

    $$self{usage} .= 
        "Usage: run-beagle\n" .
        "Options:\n" .
        "   -i, --impute-vcf <file>             The target VCF file to be imputed or genotypes refined\n" .
        "   -m, --mrProper                      Clean all intermediate files, including Impute2 output files, leaving only top-level VCFs\n" .
        "   -o, --outdir <dir>                  Output directory\n" .
        "   -r, --region <chr|chr:from-to>      Run imputation in the given region only\n" .
        "\n";

    return $self;
}

sub parse_args
{
    my ($self) = @_;
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-m' or $arg eq '--mrProper' ) { $$self{mrProper}=1; next; }
        if ( $arg eq '-r' or $arg eq '--region' ) { $$self{region}=shift(@ARGV); next; }
        if ( $arg eq '-i' or $arg eq '--impute-vcf' ) { $$self{in_vcf}=shift(@ARGV); next; }
        if ( $arg eq '-k' or $arg eq '--known-vcf' ) { $$self{known_vcf}=shift(@ARGV); next; }
        if ( $arg eq '-o' or $arg eq '--outdir' ) { $$self{outdir}=shift(@ARGV); next; }
        $self->throw();
    }

    if ( !exists($$self{outdir}) ) { $self->throw("Missing the -o option.\n"); }
    if ( !exists($$self{in_vcf}) ) { $self->throw("Missing the -i option.\n"); }
    if ( $$self{mrProper} )
    {
        $self->mrProper($$self{outdir});
        $self->all_done;
    }
    if ( !exists($$self{version}) or $$self{version} ne $$self{config_version} )
    {
        $self->warn("Warning: Your config file may be out of date, the latest version key is \"$$self{config_version}\". Please run with +sampleconf to see what changed.\n");
    }
    if ( !exists($$self{known_vcf}) ) 
    { 
        $$self{known_vcf} = '--';
    }
    elsif ( !($$self{known_vcf}=~/.gz$/) )
    {
        $self->warn("The known_vcf should be bgzipped and tabix indexed. Hopefully you know what you're doing?\n");
    }
    if ( exists($$self{buffer_region}) or exists($$self{chunk_size}) )  
    { 
        $self->throw("The keys buffer_region and chunk_size are deprecated, please use buffer_nsites and chunk_nsites instead."); 
    }
    if ( !exists($$self{buffer_nsites}) ) 
    { 
        $self->throw("Missing the key buffer_nsites"); 
    }
    if ( !exists($$self{chunk_nsites}) ) 
    { 
         $self->throw("Missing the key chunk_nsites");
    }
    if ( exists($$self{chunk_by_known}) && !exists($$self{known_vcf}) )
    {
        $self->throw("Expected the key \"known_vcf\" with \"chunk_by_known\".\n");
    }
    $$self{chunk_file} = "$$self{outdir}/chunks.txt";
}

sub main
{
    my ($self) = @_;
    $self->parse_args();

    my $outdir = $$self{outdir};

    # Convert from VCFs to Beagle
    my $chunks = $self->read_chunks();
    for my $chunk (@$chunks)
    {
        $self->spawn('vcf_to_beagle',"$outdir/$$chunk[0]/$$chunk[1]-$$chunk[2].01.vcf_to_beagle.done","$outdir/$$chunk[0]",$chunk);
    }
    $self->wait;

    # Run Beagle on all chunks
    if ( !$self->is_finished("$outdir/02.beagle.done") )
    {
        for my $chunk (@$chunks)
        {
            $self->set_limits(%{$$self{limits}}) unless !exists($$self{limits});
            my $done_file = "$outdir/$$chunk[0]/$$chunk[1]-$$chunk[2].02.beagle.done";
            $self->spawn('beagle',$done_file,"$outdir/$$chunk[0]",$chunk);
        }
        if ( $$self{merge_chroms} ) { $self->wait; }
    }
    $self->set_limits(memory=>undef,runtime=>undef);

    # Convert to VCFs and concat
    if ( !$self->is_finished("$outdir/03.merge.done") ) 
    {
        if ( $$self{merge_chroms} )
        {
            for my $chunk (@$chunks)
            {
                $self->spawn('beagle_to_vcf',"$outdir/$$chunk[0]/$$chunk[1]-$$chunk[2].03.vcfs.vcf.gz","$outdir/$$chunk[0]",$chunk);
            }
            $self->wait;
            $self->set_limits(runtime=>24*60);
            $self->spawn('concat_vcfs',"$outdir/merged.vcf.gz",$chunks);
        }
        else
        {
            # Cannot rely on Runner's wait here. Allow early release of shorter chromosomes.
            my %unfinished;
            for my $chunk (@$chunks)
            {
                if ( $self->is_finished("$outdir/$$chunk[0].vcf.gz") ) { next; }
                if ( $self->is_finished("$outdir/$$chunk[0]/$$chunk[1]-$$chunk[2].03.vcfs.vcf.gz") ) { next; }
                if ( !$self->is_finished("$outdir/$$chunk[0]/$$chunk[1]-$$chunk[2].02.beagle.done") ) 
                { 
                    push @{$unfinished{$$chunk[0]}}, "$outdir/$$chunk[0]/$$chunk[1]-$$chunk[2].02.beagle.done";
                    next; 
                }
                $self->spawn('beagle_to_vcf',"$outdir/$$chunk[0]/$$chunk[1]-$$chunk[2].03.vcfs.vcf.gz","$outdir/$$chunk[0]",$chunk);
                push @{$unfinished{$$chunk[0]}}, "$outdir/$$chunk[0]/$$chunk[1]-$$chunk[2].03.vcfs.vcf.gz";
            }
            $self->set_limits(runtime=>24*60);
            my @chroms = $self->get_chroms($chunks);
            for my $chr (@chroms)
            {
                if ( exists($unfinished{$chr}) ) { next; }
                $self->spawn('concat_vcfs',"$outdir/$chr.vcf.gz",$chunks,$chr);
            }
            if ( scalar keys %unfinished ) 
            { 
                my $prefix = $self->_get_temp_prefix((values %unfinished)[0]->[0]);
                $self->debugln("The job not finished: $prefix.*");
                exit; 
            }
        }
        $self->wait;
        $self->set_limits(runtime=>undef);
        $self->cmd("touch $outdir/03.merge.done");
    }

    # Run performance stats and clean
    $self->spawn('runtime_stats',"$outdir/runtime");
    $self->wait;
    $self->clean($outdir) unless !$$self{do_clean};

    $self->all_done;
}

sub mrProper
{
    my ($self,$outdir) = @_;
    $self->SUPER::clean($outdir);
    my $regions = $self->regions();
    for my $region (@$regions)
    {
        $self->cmd("rm -rf $outdir/$region");
    }
}

sub runtime_stats
{
    my ($self,$outfile) = @_;
    $self->cmd("mkdir -p $outfile.part");
    $self->cmd("runtime-stats $$self{outdir} -p $outfile.part/graph > $outfile.part/stats.txt");
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub read_chunks
{
    my ($self) = @_;
    if ( !-e $$self{chunk_file} ) 
    { 
        my $in_file = $$self{chunk_by_known} ? $$self{known_vcf} : $$self{in_vcf};
        my @regions = $self->define_regions($in_file);
        for my $region (@regions)
        {
            $self->spawn('define_chunks',"$$self{chunk_file}.$region",$in_file,$region);
        }
        $self->wait;

        $self->cmd("> $$self{chunk_file}.part");
        for my $region (@regions)
        {
            $self->cmd("cat $$self{chunk_file}.$region >> $$self{chunk_file}.part");
            $self->spawn('define_chunks',"$$self{chunk_file}.$region",$in_file,$region);
        }
        rename("$$self{chunk_file}.part",$$self{chunk_file}) or $self->throw("rename $$self{chunk_file}.part $$self{chunk_file}: $!");
        for my $region (@regions)
        {
            unlink("$$self{chunk_file}.$region");
        }
    }
    open(my $fh,'<',$$self{chunk_file}) or $self->throw("$$self{chunk_file}: $!");
    my @chunks;
    while (my $line=<$fh>)
    {
        chomp($line);
        my @items = split(/\t/,$line);
        push @chunks, [@items];
    }
    close($fh) or $self->throw("$$self{chunk_file}: $!");
    return \@chunks;
}

sub define_chunks
{
    my ($self,$outfile,$in_file,$region) = @_;
    my $tot_sites = $$self{buffer_nsites} + $$self{chunk_nsites};
    my (@chunks,@buffer);
    my $file = $self->expand_chrom($in_file,$region);
    my $cmd  = "tabix $file $region |";
    open(my $in,$cmd) or $self->throw("$cmd: $!");
    while (my $line=<$in>)
    {
        if ( substr($line,0,1) eq '#' ) { next; }
        my $i = index($line,"\t");
        if ( $i<0 ) { $self->throw("Could not parse the line [CHR]: $line"); }
        my $chr = substr($line,0,$i);
        my $j = index($line,"\t",$i+1);
        if ( $j<0 ) { $self->throw("Could not parse the line [POS]: $line"); }
        my $pos = substr($line,$i+1,$j-$i-1);

        if ( @buffer && $buffer[0][0] ne $chr or @buffer>$tot_sites )
        {
            my $chr_from = $buffer[0][0];
            my $pos_from = $buffer[0][1];
            my $pos_to   = $buffer[-1][1];
            my $nout     = @buffer;
            push @chunks, { chr=>$chr_from, from=>$pos_from, to=>$pos_to, n=>$nout };
            if ( $$self{chunk_nsites}<@buffer ) { splice(@buffer,0,$$self{chunk_nsites}); }
            else { @buffer = (); }
        }
        push @buffer, [$chr,$pos];
    }
    if ( @buffer )
    {
        my $chr_from = $buffer[0][0];
        my $pos_from = $buffer[0][1];
        my $pos_to   = $buffer[-1][1];
        my $nout     = @buffer;
        push @chunks, { chr=>$chr_from, from=>$pos_from, to=>$pos_to, n=>$nout };
    }
    close($in) or $self->throw("close $cmd");

    if ( !@chunks ) { $self->throw("No chunks defined?\n"); }
    if ( @chunks>1 && $chunks[-1]{n} < $tot_sites*0.75 )
    {
        my $chunk = splice(@chunks,-1,1);
        $chunks[-1]{to} = $$chunk{to};
        $chunks[-1]{n} += $$chunk{n};
    }

    open(my $out,'>',"$outfile.part") or $self->throw("$outfile.part: $!");
    for my $chunk (@chunks)
    {
        print $out "$$chunk{chr}\t$$chunk{from}\t$$chunk{to}\t$$chunk{n}\n";
    }
    close($out) or $self->throw("close $outfile.part");
    rename("$outfile.part",$outfile);
}

sub get_chroms
{
    my ($self,$regions) = @_;
    my %chroms;
    for my $reg (@$regions) 
    { 
        $chroms{$$reg[0]} = 1; 
    }
    return ( sort keys %chroms );
}

sub expand_chrom
{
    my ($self,$path,$region) = @_;
    $region =~ s/:.*$//;
    $path =~ s/{CHROM}/$region/g;
    return $path;
}

sub define_regions
{
    my ($self,$path) = @_;
    if ( exists($$self{region}) ) { return @{$$self{region}}; }
    if ( !($path=~/{CHROM}/) ) { return ('.'); }
    my $before = $`;
    my $after  = $';
    $path =~ s/{CHROM}/*/;  # only one occurance of {CHROM} is allowed in this implementation
    my @list = glob($path);
    my @regs;
    for my $file (@list)
    {
        $file =~ s{^$before}{};
        $file =~ s{$after$}{};
        push @regs,$file;
    }
    return @regs;
}

sub vcf_to_beagle
{
    my ($self,$outfile,$outdir,$chunk) = @_;
    my $chr  = $$chunk[0];
    my $from = $$chunk[1];
    my $to   = $$chunk[2];
    if ( $from<0 ) { $from = 0; }
    my $in_vcf    = $self->expand_chrom($$self{in_vcf},$chr);
    my $known_vcf = $self->expand_chrom($$self{known_vcf},$chr);
    $self->cmd(qq[mkdir -p $outdir]);
    $self->cmd(qq[$$self{vcf_beagle} -r $chr:$from-$to -i $in_vcf -k $known_vcf -o $outdir/$from-$to.01 >>$outfile.o 2>>$outfile.e && touch $outfile]);
}

sub beagle
{
    my ($self,$outfile,$outdir,$chunk) = @_;
    my $prefix = "$outdir/$$chunk[1]-$$chunk[2]";
    if ( !-s "$prefix.01.markers.impute" or (!-s "$prefix.01.markers.known" && $$self{known_vcf} ne '--') )
    {
        # The region is empty
        $self->cmd("touch $outfile");
        return;
    }
    my $mem = $self->get_limits('memory') * 0.8;
    if ( $mem<=0 ) { $mem = 500; }
    my $haps = $$self{known_is_phased} ? 'phased' : 'unphased';
    my $known = $$self{known_vcf} eq '--' ? '' : "markers=$prefix.01.markers $haps=$prefix.01.known_haps.gz missing=?";
    $self->java_cmd(qq[java -Xms${mem}m -Xmx${mem}m $$self{java_args} -jar $$self{beagle_jar} $$self{beagle_args} like=$prefix.01.impute_haps.gz $known out=$prefix.02 >>$outfile.o],"$outfile.e");
    if ( -s "$outfile.e" ) { $self->throw("Expected empty error file: $outfile.e"); }
    $self->cmd(qq[touch $outfile]);
}

sub beagle_to_vcf
{
    my ($self,$outfile,$outdir,$chunk) = @_;
    my $prefix = "$outdir/$$chunk[1]-$$chunk[2]";
    if ( ! -e "$prefix.02.$$chunk[1]-$$chunk[2].01.impute_haps.gz.gprobs.gz" )
    {
        $self->throw("The region is empty: $prefix.01.impute_haps.gz.gprobs.gz?!\n");
        # # The region is empty
        # $self->cmd("touch $outfile");
        # return;
    }
    my $in_vcf = $self->expand_chrom($$self{in_vcf},$$chunk[0]);
    $self->cmd(qq[$$self{vcf_beagle} -r $$chunk[0]:$$chunk[1]-$$chunk[2] -i $in_vcf -o $prefix.02.$$chunk[1]-$$chunk[2].01.impute_haps.gz.gprobs.gz 2>>$outfile.e | bgzip -c > $outfile.part]);
    $self->tabix_part($outfile);
    rename("$outfile.part",$outfile);
}

sub concat_vcfs
{
    my ($self,$outfile,$chunks,$chr) = @_;
    open(my $fh,'>',"$outfile.list") or $self->throw("$outfile.list: $!");
    for my $chunk (@$chunks)
    {
        if ( $$chunk[0] ne $chr ) { next; }
        my $file = "$$self{outdir}/$$chunk[0]/$$chunk[1]-$$chunk[2].03.vcfs.vcf.gz";
        print $fh $file, "\n";
    }
    close($fh);
    $self->cmd(qq[vcf-phased-join $$self{phased_join_args} -l $outfile.list -o - 2>>$outfile.log | bgzip -c > $outfile.part]);
    $self->tabix_part($outfile);
    rename("$outfile.part",$outfile);
}


sub tabix_part
{
    my ($self,$vcf) = @_;
    $self->cmd("tabix -p vcf -f $vcf.part");
    rename("$vcf.part.tbi","$vcf.tbi");
}

sub cmd
{
    my ($self,$cmd) = @_;
    return Utils::CMD($cmd,{verbose=>1});
}
sub java_cmd
{
    my ($self,$cmd,$err_file) = @_;

    print STDERR "$cmd 2>$err_file\n";
    if ( -e $err_file ) { `cat $err_file >> $err_file.prev`; unlink($err_file); }

    `$cmd 2>$err_file`;
    if ( ! $? ) { return; } # finished OK

    # something went wrong
    my $out_of_memory = 0;
    open(my $fh,'<',$err_file) or $self->throw("$err_file: $!");
    while (my $line=<$fh>)
    {
        if ( $line=~/java.lang.OutOfMemoryError/ ) { $out_of_memory = 1; last; }
        if ( $line=~/Could not create the Java virtual machine/ ) { $out_of_memory = 1; last; }
    }
    close($fh);
    if ( !$out_of_memory ) { $self->throw("The command failed: $cmd\n"); }

    # out of memory: tell the runner to use more memory next time
    my $mem =  $self->get_limits('memory') + $$self{memstep};
    $self->set_limits(memory=>$mem);
    $self->freeze();

    $self->throw("Memory limit exceeded, increasing the memory limit for the next run to $mem. The command was:\n$cmd\n");
}


