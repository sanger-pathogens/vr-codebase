#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#
# Dependencies: 
#	- matplotlib
#		http://matplotlib.sourceforge.net
#	- LaTex/xcolor.sty
#		Download .sty.gz LaTeX class style from http://www.ukern.de/tex/xcolor.html,
#		unpack and install system-wide or place elsewhere and make available by
#		setting the TEXINPUTS environment variable (note the colon)
#			export TEXINPUTS=some/dir:
#		The list of the recognised path can be obtained from `kpsepath tex`
#	
#

use strict;
use warnings;
use Carp;

my $opts = parse_params();
parse_vcfcheck($opts);
if ( $$opts{make_plots} )
{
	init_plots($opts);
	plot_venn_bars($opts);
	plot_counts_by_AF($opts);
	plot_concordance_by_AF($opts);
	plot_concordance_by_sample($opts);
	for my $id (file_ids($opts))
	{
		plot_tstv_by_AF($opts,$id);
		#plot_tstv_by_QUAL($opts,$id);
		plot_indel_distribution($opts,$id);
		plot_substitutions($opts,$id);
		plot_tstv_by_sample($opts,$id);
		plot_DP($opts,$id);
	}
	plot($opts);
}
create_pdf($opts) unless !$$opts{make_pdf};

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "Usage: plot-vcfcheck [OPTIONS] file.chk\n",
        "       plot-vcfcheck -p outdir/ file.chk\n",
        "Options:\n",
        "   -k, --keep-files                    Do not remove temporary files.\n",
        "   -p, --prefix <path>                 The output files prefix, add a slash to create new directory.\n",
        "   -P, --no-PDF                        Skip the PDF creation step.\n",
        "   -t, --title <string>                Use this title in plots, can be given multiple times.\n",
        "   -h, -?, --help                      This help message.\n",
        "\n";
}


sub parse_params
{
    $0 =~ s{^.+/}{};
    my $opts = 
	{ 
		verbose    => 1,
		make_pdf   => 1,
		make_plots => 1,
		args       => join(' ',$0,@ARGV), 
		img_width  => 11/2.54,
		img_height => 10/2.54,
		id2col     => [ 'orange', 'r', 'k' ],
		tex => 
		{
			slide3v => { height1 => '7cm', height2 => '7cm',  height3 => '4.5cm' },
			slide3h => { width1  => '15cm', width2 => '10cm', width3 => '8cm' },
		},
	};
    while (defined(my $arg=shift(@ARGV)))
    {
        if (                 $arg eq '--no-plots' ) { $$opts{make_plots}=0; next; }
        if ( $arg eq '-P' || $arg eq '--no-PDF' ) { $$opts{make_pdf}=0; next; }
        if ( $arg eq '-k' || $arg eq '--keep-files' ) { $$opts{keep_files}=1; next; }
        if ( $arg eq '-t' || $arg eq '--titles' ) { push @{$$opts{titles}},shift(@ARGV); next; }
        if ( $arg eq '-p' || $arg eq '--prefix' ) { $$opts{prefix}=shift(@ARGV); next; }
        if ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        if ( -e $arg ) { $$opts{vcfcheck}=$arg; next; }
        error("Unknown parameter or non-existent file \"$arg\". Run -h for help.\n");
    }
    if ( !exists($$opts{vcfcheck}) ) { error("No vcfcheck file?\n") }
    if ( !exists($$opts{prefix}) ) { error("Expected -p parameter.\n") }

	$$opts{dir} = $$opts{prefix};
	$$opts{dir} =~ s{/[^/]+$}{/};
	if ( !($$opts{dir}=~m{/$}) ) { $$opts{dir} = './'; }
	if ( !($$opts{prefix}=~m{/$}) && !($$opts{prefix}=~/-$/) ) { $$opts{prefix} .= '-'; }
	$$opts{lprefix} = $$opts{prefix};
	$$opts{lprefix} =~ s{^.+/}{};
	$$opts{logfile} = "$$opts{lprefix}plot-vcfcheck.log";
	if ( !-d $$opts{dir} ) { `mkdir -p $$opts{dir}`; } 
	`> $$opts{dir}$$opts{logfile}`;
    return $opts;
}


sub plot
{
    my ($opts) = @_;
	if ( !exists($$opts{plt_fh}) ) { return; }
	close($$opts{plt_fh}) or error("close $$opts{plt_fh}");
    my $cmd = "python $$opts{plt_file}";
	print STDERR "Plotting graphs: $cmd\n" unless !$$opts{verbose};
    system($cmd);
    if ( $? ) { error("The command exited with non-zero status $?:\n\t$cmd\n\n"); }
}


sub parse_vcfcheck
{
    my ($opts) = @_;
	print STDERR "Parsing vcfcheck output: $$opts{vcfcheck}\n" unless !$$opts{verbose};
    open(my $fh,'<',$$opts{vcfcheck}) or error("$$opts{vcfcheck}: $!");
    my $line = <$fh>;
    if ( !$line or !($line=~/^# This file was produced by vcfcheck/) ) { error("Sanity check failed: was this file generated by vcfcheck?"); }
    while ($line=<$fh>)
    {
        if ( $line=~/^#/ ) { next; }
        my @items = split(/\t/,$line);
        chomp($items[-1]);
        if ( $items[0] eq 'SN' )
        {
            $$opts{dat}{$items[1]}{$items[2]} = splice(@items,3);
            next;
        }
        push @{$$opts{dat}{$items[0]}{$items[1]}}, [splice(@items,2)];
    }
    close($fh);

    # Check sanity
    if ( !exists($$opts{dat}{ID}{0}) )
    {
        error("Sanity check failed: no stats found by vcfcheck??\n");
    }

	# Set titles
	my %titles;
	if ( exists($$opts{titles}) )
	{
		for (my $i=0; $i<@{$$opts{titles}}; $i++)
		{
			if ( !exists($$opts{dat}{ID}{$i}) ) { next; }
			$titles{$$opts{dat}{ID}{$i}[0][0]} = $$opts{titles}[$i];
		}
	}
	for my $id (file_ids($opts))
	{
		my @files;
		for my $file (@{$$opts{dat}{ID}{$id}[0]})
		{
			my $title = $file;
			if ( exists($titles{$file}) ) { $title = $titles{$file}; }
			else 
			{ 
				$title =~ s{^.*/}{};
				$title =~ s{\.vcf\.gz$}{}i;
			}
			push @files, $title;
			$$opts{title}{$file} = $title;
		}
		$$opts{title}{$id} = join(' + ',@files);
	}

	# mapping from file names to list of IDs
	for my $id (file_ids($opts))
	{
		my @files;
		for my $file (@{$$opts{dat}{ID}{$id}[0]})
		{
			push @{$$opts{file2ids}{$file}}, $id;
		}
	}
}

sub file_ids
{
	my ($opts) = @_;
	my $id = 0;
	my @out;
	while ( exists($$opts{dat}{ID}) && exists($$opts{dat}{ID}{$id}) ) { push @out, $id++; }
	return @out;
}

sub iprint
{
	my ($fh,@txt) = @_;
	for my $txt (@txt)
	{
		$txt =~ s/\n[ \t]+/\n/g;
		print $fh $txt;
	}
}

sub init_plots
{
    my ($opts) = @_;

	$$opts{plt_file} = "$$opts{prefix}plot.py";

	open(my $fh,'>',$$opts{plt_file}) or error("$$opts{plt_file}: $!");
	iprint $fh, qq[
		# This file was produced by plot-vcfcheck, the command line was:
		#	$$opts{args}
		#
		# Edit as necessary and recreate the plots by running
		#	python $$opts{plt_file} 
		#

		import matplotlib as mpl
		mpl.use('Agg')
		import matplotlib.pyplot as plt
		];
	$$opts{plt_fh} = $fh;
}

sub percentile
{
    my ($p,@vals) = @_;
    my $N = 0;
    for my $val (@vals) { $N += $val; }
    my $n = $p*($N+1)/100.;
    my $k = int($n);
    my $d = $n-$k;
    if ( $k<=0 ) { return 0; }
    if ( $k>=$N ) { return scalar @vals-1; }
    my $cnt;
    for (my $i=0; $i<@vals; $i++)
    { 
        $cnt += $vals[$i]; 
        if ( $cnt>=$k ) { return $i; }
    }
    error("FIXME: this should not happen [percentile]\n");
}

sub get_values
{
	my ($opts,$id,$key) = @_;
	if ( !exists($$opts{dat}{$key}) ) { return (); }
	if ( !exists($$opts{dat}{$key}{$id}) ) { return (); }
	return (@{$$opts{dat}{$key}{$id}});
}

sub get_value
{
	my ($opts,$id,$key) = @_;
	if ( !exists($$opts{dat}{$id}) ) { return undef; }
	if ( !exists($$opts{dat}{$id}{$key}) ) { return undef}
	return $$opts{dat}{$id}{$key};
}

sub plot_venn_bars
{
    my ($opts) = @_;

	my @ids  = file_ids($opts);
	if ( @ids != 3 ) { return; }

	my (@snps,@indels,@tstv,@snp_titles,@indel_titles);
	for my $id (0..2)
	{
		push @snps, get_value($opts,$id,'number of SNPs:');
		push @indels, get_value($opts,$id,'number of indels:');
		push @tstv, get_value($opts,$id,'ts/tv:');
		push @snp_titles, "$$opts{title}{$id}\\nts/tv $tstv[$id]\\n" .bignum($snps[$id]);
		my @fs = get_values($opts,$id,'FS');
        my $fs = @fs ? "frm $fs[0][2]\\n" : '';
		push @indel_titles, "$$opts{title}{$id}\\n$fs" .bignum($indels[$id]);
	}

    my $fh = $$opts{plt_fh};
	iprint $fh, qq[
			fig = plt.figure(figsize=($$opts{img_width},$$opts{img_height}))
	 		ax1 = fig.add_subplot(111)
	 		ax1.bar([1,2,3],[$snps[0],$snps[2],$snps[1]],align='center',color='y',width=0.3)
			ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y') 
			ax1.set_xlim(0.5,3.5)
			plt.xticks([1,2,3],('$snp_titles[0]','$snp_titles[2]','$snp_titles[1]'))
			plt.title('Number of SNPs')
			plt.subplots_adjust(right=0.95,bottom=0.15)
	 		plt.savefig('$$opts{prefix}venn_bars.snps.png')
	 		plt.savefig('$$opts{prefix}venn_bars.snps.pdf')
	 		plt.close()

			fig = plt.figure(figsize=($$opts{img_width},$$opts{img_height}))
	 		ax1 = fig.add_subplot(111)
	 		ax1.bar([1,2,3],[$indels[0],$indels[2],$indels[1]],align='center',color='r',width=0.3)
			ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y') 
			ax1.set_xlim(0.5,3.5)
			plt.xticks([1,2,3],('$indel_titles[0]','$indel_titles[2]','$indel_titles[1]'))
			plt.title('Number of indels')
			plt.subplots_adjust(right=0.95,bottom=0.15)
	 		plt.savefig('$$opts{prefix}venn_bars.indels.png')
	 		plt.savefig('$$opts{prefix}venn_bars.indels.pdf')
	 		plt.close()
		];
}

sub plot_tstv_by_sample
{
	my ($opts,$id) = @_;
	my @vals = get_values($opts,$id,'PSC');
	if ( !@vals ) { return; }

	my $fh   = $$opts{plt_fh};
	my $img  = "$$opts{prefix}tstv_by_sample.$id";
	my $img2 = "$$opts{prefix}hets_by_sample.$id";
	my $img3 = "$$opts{prefix}snps_by_sample.$id";
	my $img4 = "$$opts{prefix}indels_by_sample.$id";

	iprint $fh, "
			dat = [
		";
	for (my $i=0; $i<@vals; $i++)
	{ 
		my $tstv = $vals[$i][3] ? $vals[$i][2]/$vals[$i][3] : 0;
		iprint $fh, sprintf("\t[ %d, %f, %d, %d, %d ],\n", $i, $tstv, $vals[$i][1], $vals[$i][2]+$vals[$i][3], $vals[$i][4]);
	}
	iprint $fh, "]

			fig = plt.figure(figsize=(2*$$opts{img_width},$$opts{img_height}*0.7))
			ax1 = fig.add_subplot(111)
			ax1.plot([row[0] for row in dat], [row[1] for row in dat], 'o', color='$$opts{id2col}[$id]',mec='$$opts{id2col}[$id]')
			ax1.set_ylabel('Ts/Tv')
			ax1.set_xlabel('Sample ID')
			ax1.set_ylim(0,0.5+max(3,max(row[1] for row in dat)))
			plt.subplots_adjust(right=0.98,left=0.07,bottom=0.17)
			plt.title('$$opts{title}{$id}')
			plt.savefig('$img.png')
			plt.savefig('$img.pdf')
			plt.close()

			fig = plt.figure(figsize=(2*$$opts{img_width},$$opts{img_height}*0.7))
			ax1 = fig.add_subplot(111)
			ax1.plot([row[0] for row in dat], [row[2] for row in dat], 'o', color='$$opts{id2col}[$id]',mec='$$opts{id2col}[$id]')
			ax1.set_ylabel('Number of hets')
			ax1.set_xlabel('Sample ID')
			ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y')
			plt.subplots_adjust(right=0.98,left=0.07,bottom=0.17)
			plt.title('$$opts{title}{$id}')
			plt.savefig('$img2.png')
			plt.savefig('$img2.pdf')
			plt.close()

			fig = plt.figure(figsize=(2*$$opts{img_width},$$opts{img_height}*0.7))
			ax1 = fig.add_subplot(111)
			ax1.plot([row[0] for row in dat], [row[3] for row in dat], 'o', color='$$opts{id2col}[$id]',mec='$$opts{id2col}[$id]')
			ax1.set_ylabel('Number of SNPs')
			ax1.set_xlabel('Sample ID')
			ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y')
			plt.subplots_adjust(right=0.98,left=0.07,bottom=0.17)
			plt.title('$$opts{title}{$id}')
			plt.savefig('$img3.png')
			plt.savefig('$img3.pdf')
			plt.close()

			fig = plt.figure(figsize=(2*$$opts{img_width},$$opts{img_height}*0.7))
			ax1 = fig.add_subplot(111)
			ax1.plot([row[0] for row in dat], [row[4] for row in dat], 'o', color='$$opts{id2col}[$id]',mec='$$opts{id2col}[$id]')
			ax1.set_ylabel('Number of indels')
			ax1.set_xlabel('Sample ID')
			ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y')
			plt.subplots_adjust(right=0.98,left=0.07,bottom=0.17)
			plt.title('$$opts{title}{$id}')
			plt.savefig('$img4.png')
			plt.savefig('$img4.pdf')
			plt.close()
		";
}

sub plot_DP
{
	my ($opts,$id) = @_;
	my @vals = get_values($opts,$id,'DP');
	if ( !@vals ) { return; }

	my $fh   = $$opts{plt_fh};
	my $img  = "$$opts{prefix}depth.$id";

	iprint $fh, "
			dat = [
		";
    my $sum = 0;
	for (my $i=0; $i<@vals; $i++)
	{ 
        $sum += $vals[$i][2];
        if ( $sum>99 ) { last; }
		iprint $fh, sprintf("\t[ %d, %f, %f ],\n", $vals[$i][0], $sum, $vals[$i][2]);
	}
	iprint $fh, "]

			fig = plt.figure(figsize=($$opts{img_width},$$opts{img_height}))
			ax1 = fig.add_subplot(111)
            ax1.plot([row[0] for row in dat], [row[2] for row in dat], '-^', color='k')
            ax1.set_ylabel('Number of genotypes [%]',color='k')
			ax1.set_xlabel('Depth')
            ax2 = ax1.twinx()
			ax2.plot([row[0] for row in dat], [row[1] for row in dat], '-o', color='$$opts{id2col}[$id]')
			ax2.set_ylabel('Cumulative number of genotypes [%]',color='$$opts{id2col}[$id]')
            for tl in ax2.get_yticklabels(): tl.set_color('$$opts{id2col}[$id]')
			plt.subplots_adjust(left=0.15,bottom=0.15,right=0.87)
			plt.title('$$opts{title}{$id}')
			plt.savefig('$img.png')
			plt.savefig('$img.pdf')
			plt.close()
		";
}

sub plot_tstv_by_AF
{
    my ($opts,$id) = @_;
	my @vals = get_values($opts,$id,'AF');
    if ( !@vals ) { return; }

    my $fh   = $$opts{plt_fh};
	my $img  = "$$opts{prefix}tstv_by_af.$id";
	my $vals = rebin_values(\@vals,8,0);

    my $has_vals = 0;
	iprint $fh, "
			dat = [
		";
	for (my $i=0; $i<@$vals; $i++)
	{ 
		if ( $$vals[$i][2] + $$vals[$i][3] == 0 ) { next; }
        $has_vals++;
		iprint $fh, sprintf("\t[ %f, %d, %f ],\n", 
			$$vals[$i][0]/100., 
			$$vals[$i][2] + $$vals[$i][3],
			$$vals[$i][3] ? $$vals[$i][2]/$$vals[$i][3]: 0);
	}
	iprint $fh, "]";
    if ( $has_vals<2 ) { return; }

	iprint $fh, "
			fig = plt.figure(figsize=($$opts{img_width},$$opts{img_height}))
			ax1 = fig.add_subplot(111)
			ax1.plot([row[0] for row in dat], [row[1] for row in dat], color='k')
			ax1.set_ylabel('Number of sites',color='k')
			ax1.set_yscale('log')
			#ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y') 
			for tl in ax1.get_yticklabels(): tl.set_color('k')
			ax1.set_xlabel('Non-ref allele frequency')
			ax2 = ax1.twinx()
			ax2.plot([row[0] for row in dat], [row[2] for row in dat], color='r')
			ax2.set_ylabel('Ts/Tv',color='r')
			ax2.set_ylim(0,0.5+max(3,max(row[2] for row in dat)))
			ax1.set_xlim(0,1)
			for tl in ax2.get_yticklabels(): tl.set_color('r')
			plt.subplots_adjust(right=0.88,left=0.15,bottom=0.11)
			plt.title('$$opts{title}{$id}')
			plt.savefig('$img.png')
			plt.savefig('$img.pdf')
			plt.close()
		";
}

sub plot_tstv_by_QUAL
{
    my ($opts,$id) = @_;
	my @vals = get_values($opts,$id,'QUAL');
    if ( !@vals ) { return; }

    my $fh   = $$opts{plt_fh};
	my $img  = "$$opts{prefix}tstv_by_qual.$id";

    my $has_vals = 0;
	iprint $fh, "
			dat = [
		";
	for (my $i=0; $i<@vals; $i++)
	{ 
		if ( $vals[$i][1] == 0 ) { next; }
        $has_vals++;
		iprint $fh, sprintf("\t[ %d, %d, %f ],\n", 
			$vals[$i][0], 
			$vals[$i][1],
			$vals[$i][3] ? $vals[$i][2]/$vals[$i][3]: 0);
	}
	iprint $fh, "]";
    if ( $has_vals<2 ) { return; }

	iprint $fh, "
			fig = plt.figure(figsize=($$opts{img_width},$$opts{img_height}))
			ax1 = fig.add_subplot(111)
			ax1.plot([row[0] for row in dat], [row[1] for row in dat], color='k')
			ax1.set_ylabel('Number of sites',color='k')
			ax1.set_yscale('log')
			for tl in ax1.get_yticklabels(): tl.set_color('k')
			ax1.set_xlabel('Quality')
			ax2 = ax1.twinx()
			ax2.plot([row[0] for row in dat], [row[2] for row in dat], color='r')
			ax2.set_ylabel('Ts/Tv',color='r')
			ax2.set_ylim(0,0.5+max(3,max(row[2] for row in dat)))
			#ax1.set_xlim(0,100)
			for tl in ax2.get_yticklabels(): tl.set_color('r')
			plt.subplots_adjust(right=0.88,left=0.15,bottom=0.11)
			plt.title('$$opts{title}{$id}')
			plt.savefig('$img.png')
			plt.savefig('$img.pdf')
			plt.close()
		";
}

sub rebin_values
{
	my ($vals,$bin_size,$col) = @_;
	my $prev = $$vals[0][$col];
	my $iprev = 0;
	my (@dat,@out);
	for (my $i=0; $i<@$vals; $i++)
	{
		for (my $icol=0; $icol<@{$$vals[$i]}; $icol++)
		{
			if ( $icol==$col ) { next; }
			$dat[$icol] += $$vals[$i][$icol];
		}
		if ( $i+1<@$vals && $$vals[$i][$col] - $prev < $bin_size ) { next; }
		$dat[$col] = $prev;
		for (my $icol=0; $icol<@{$$vals[$i]}; $icol++) { $out[$iprev][$icol] = $dat[$icol] ? $dat[$icol] : 0; }
		@dat = ();
		$iprev++;
		$prev = $$vals[$i][$col];
	}
	return \@out;
}

sub plot_concordance_by_AF
{
	my ($opts) = @_;
	my @vals = get_values($opts,2,'GCsAF');
	if ( !@vals ) { return; }

	my $fh   = $$opts{plt_fh};
	my $img  = "$$opts{prefix}gts_by_af";
	my $vals = rebin_values(\@vals,1,0);

	iprint $fh, "
			dat = [
		";
	for (my $i=0; $i<@$vals; $i++)
	{ 
		iprint $fh, sprintf("\t[ %f,%f,%f,%f,%f,%f,%f ],\n", 
			$$vals[$i][0]/100., 
			$$vals[$i][1]+$$vals[$i][4] ? $$vals[$i][1]/($$vals[$i][1]+$$vals[$i][4]) : 0,
			$$vals[$i][2]+$$vals[$i][5] ? $$vals[$i][2]/($$vals[$i][2]+$$vals[$i][5]) : 0,
			$$vals[$i][3]+$$vals[$i][6] ? $$vals[$i][3]/($$vals[$i][3]+$$vals[$i][6]) : 0,
			$$vals[$i][1]+$$vals[$i][4],
			$$vals[$i][2]+$$vals[$i][5],
			$$vals[$i][3]+$$vals[$i][6]
			);
	}
	iprint $fh, "]

			fig = plt.figure(figsize=($$opts{img_width},$$opts{img_height}))
			ax1 = fig.add_subplot(111)
			ax1.plot([row[0] for row in dat], [row[1] for row in dat],'.',color='$$opts{id2col}[1]',label='Hom RR')
			ax1.plot([row[0] for row in dat], [row[2] for row in dat],'.',color='$$opts{id2col}[0]',label='Het RA')
			ax1.plot([row[0] for row in dat], [row[3] for row in dat],'.',color='$$opts{id2col}[2]',label='Hom AA')
			ax1.set_xlabel('Non-ref allele frequency')
			ax1.set_ylabel('Concordance [%]')
			ax1.legend(numpoints=1,markerscale=2,loc='best',prop={'size':10}).draw_frame(False)
			ax2 = ax1.twinx()
			ax2.plot([row[0] for row in dat], [row[4] for row in dat],color='$$opts{id2col}[1]')
			ax2.plot([row[0] for row in dat], [row[5] for row in dat],color='$$opts{id2col}[0]')
			ax2.plot([row[0] for row in dat], [row[6] for row in dat],color='$$opts{id2col}[2]')
			ax2.set_ylabel('Number of genotypes')
			ax2.set_yscale('log')
			plt.subplots_adjust(left=0.15,right=0.83,bottom=0.11)
			plt.savefig('$img.png')
			plt.savefig('$img.pdf')
			plt.close()
		";
}

sub plot_concordance_by_sample
{
	my ($opts) = @_;
	my @vals = get_values($opts,2,'GCsS');
	if ( !@vals ) { return; }

	my $fh   = $$opts{plt_fh};
	my $img  = "$$opts{prefix}gts_by_sample";

	my @counts;
	iprint $fh, "
			dat = [
		";
	for (my $i=0; $i<@vals; $i++)
	{ 
		iprint $fh, sprintf("\t[ %d,%f ],\n", $i, $vals[$i][1]/100.);
	}
	iprint $fh, "]

			fig = plt.figure(figsize=(2*$$opts{img_width},$$opts{img_height}*0.7))
			ax1 = fig.add_subplot(111)
			ax1.plot([row[0] for row in dat], [row[1] for row in dat],'.',color='orange')
			ax1.set_xlabel('Sample ID')
			ax1.set_ylabel('Non-ref discordance')
			ax1.set_ylim(0,)
			plt.subplots_adjust(right=0.98,left=0.08,bottom=0.17)
			plt.savefig('$img.png')
			plt.savefig('$img.pdf')
			plt.close()
		";
}

sub plot_counts_by_AF
{
	my ($opts) = @_;
	plot_counts_by_AF_col($opts,1,'SNP');
	plot_counts_by_AF_col($opts,4,'Indel');
}

sub plot_counts_by_AF_col
{
	my ($opts,$col,$title) = @_;

    my $fh  = $$opts{plt_fh};
	my $img = "$$opts{prefix}counts_by_af.".lc($title)."s";

	my @files = (keys %{$$opts{file2ids}});
	for (my $ifile=0; $ifile<@files; $ifile++)
	{
		iprint $fh, "
			dat$ifile = [
			";
		my $file = $files[$ifile];
		my %vals;
		for my $id (@{$$opts{file2ids}{$file}})
		{
			my @tmp = get_values($opts,$id,'AF');
			for my $val (@tmp)
			{
				$vals{$$val[0]} += $$val[$col];
			}
		}
		for my $key (sort {$a<=>$b} keys %vals)
		{
			if ( !$vals{$key} ) { next; }
			iprint $fh, "[ $key, $vals{$key} ],\n";
		}
		iprint $fh, "]\n";
	}
	
	iprint $fh, "
			fig = plt.figure(figsize=(2*$$opts{img_width},$$opts{img_height}*0.7))
			ax1 = fig.add_subplot(111)
			ax1.set_ylabel('Number of sites')
			ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y') 
			ax1.set_yscale('log')
			ax1.set_xscale('log')
			ax1.set_xlabel('Non-reference allele frequency')
			#ax1.set_xlim(0,1)
		";
	my @cols = ('r','k');
	for (my $ifile=0; $ifile<@files; $ifile++)
	{
		iprint $fh, "
			ax1.plot([row[0]/100. for row in dat$ifile], [row[1] for row in dat$ifile], '.', markersize=3, color='$cols[$ifile]',label='$$opts{title}{$files[$ifile]}')
		";
	}
    if ( @files>1 )
    {
        iprint $fh, "ax1.legend(numpoints=1,markerscale=2).draw_frame(False)\n";
    }
	iprint $fh, "
			plt.title('$title count by AF')
			plt.subplots_adjust(bottom=0.2,left=0.1,right=0.95)
			plt.savefig('$img.png')
			plt.savefig('$img.pdf')
			plt.close()
		";

}

sub plot_indel_distribution
{
	my ($opts,$id) = @_;

	my @vals = get_values($opts,$id,'IDD');
	if ( !@vals ) { return; }

	# Set xlim to show 99 of indels but ignore outliers
	my @tmp;
	for my $id (file_ids($opts))
	{
		my @v = get_values($opts,$id,'IDD');
		for my $v (@v) { $tmp[ abs($$v[0]) ] += $$v[1]; }
	}
	my $n; 
	for my $t (@tmp) { $n += $t ? $t : 0; }
	my ($sum,$xlim);
	for ($xlim=0; $xlim<@tmp; $xlim++)
	{
		$sum += $tmp[$xlim] ? $tmp[$xlim] : 0;
		if ( $sum/$n >= 0.99 ) { last; }
	}
	if ( $xlim<20 ) { $xlim=20; }

    my $fh  = $$opts{plt_fh};
	my $img = "$$opts{prefix}indels.$id";

	iprint $fh, "
			dat = [
		";
	for my $val (@vals) { iprint $fh, "\t[$$val[0],$$val[1]],\n"; }
	iprint $fh, "]

			fig = plt.figure(figsize=($$opts{img_width},$$opts{img_height}))
			ax1 = fig.add_subplot(111)
			ax1.bar([row[0]-0.5 for row in dat], [row[1] for row in dat], color='y') #, edgecolor='y')
			ax1.set_xlabel('InDel Length')
			ax1.set_ylabel('Count')
			ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y')
			ax1.set_xlim(-$xlim,$xlim)
			plt.subplots_adjust(bottom=0.17)
			plt.title('$$opts{title}{$id}')
			plt.savefig('$img.png')
			plt.savefig('$img.pdf')
			plt.close()
		";
}

sub plot_substitutions
{
	my ($opts,$id) = @_;

	my @vals = get_values($opts,$id,'ST');
    if ( !@vals ) { return; }

    my $fh  = $$opts{plt_fh};
	my $img = "$$opts{prefix}substitutions.$id";

	iprint $fh, "
			dat = [
		";
	for (my $i=0; $i<@vals; $i++) { my $val=$vals[$i]; iprint $fh, "\t[$i,'$$val[0]',$$val[1]],\n"; }
	iprint $fh, "]

			fig = plt.figure(figsize=($$opts{img_width},$$opts{img_height}))
			cm  = mpl.cm.get_cmap('autumn')
			n = 12
			col = range(n)
			for i in range(n): col[i] = cm(1.*i/n)
			ax1 = fig.add_subplot(111)
			ax1.bar([row[0] for row in dat], [row[2] for row in dat], color=col)
			ax1.set_ylabel('Count')
			ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y')
			ax1.set_xlim(-0.5,n+0.5)
			plt.xticks([row[0] for row in dat],[row[1] for row in dat],rotation=45)
			plt.title('$$opts{title}{$id}')
			plt.savefig('$img.png')
			plt.savefig('$img.pdf')
			plt.close()
		";
}

sub singletons
{
	my ($opts,$id) = @_;
	my @si_vals   = get_values($opts,$id,'SiS');
	my $si_snps   = $si_vals[0][1];
	my $si_indels = $si_vals[0][4];
	my $si_tstv   = sprintf "%.2f", $si_vals[0][3] ? $si_vals[0][2]/$si_vals[0][3] : 0;
	my @all_vals  = get_values($opts,$id,'AF');
	my $nsnps = 0;
	my $nindels = 0;
	for my $val (@all_vals)
	{
		$nsnps += $$val[1];
		$nindels += $$val[4];
	}
	$si_snps   = sprintf "%.1f", $nsnps ? $si_snps*100./$nsnps : 0;
	$si_indels = sprintf "%.1f", $nindels ? $si_indels*100./$nindels : 0;
	return { snps=>$si_snps, indels=>$si_indels, tstv=>$si_tstv };
}

sub fmt_slide3v
{
	my ($opts, $image, $title) = @_;

	my $n = 0;
	for my $id (0..2) 
	{ 
		if ( -e "$image.$id.pdf" ) { $n++; } 
	}
	if ( !$n ) { return ''; }
	my $h = $$opts{tex}{slide3v}{"height$n"};
	my $slide = q[\vbox{];
	for my $id (0..2) 
	{ 
		if ( !-e "$image.$id.pdf" ) { next; }
		$slide .= qq[\\centerline{\\includegraphics[type=pdf,ext=.pdf,read=.pdf,height=$h]{$image.$id}}];
	}
	$slide .= '}';
	return qq[
			% $title
			%
			\\hslide{$title}{$slide}
		];
}
sub fmt_slide3h
{
	my ($opts, $image, $title) = @_;
	my $n = 0;
	for my $id (0..2) 
	{ 
		if ( -e "$image.$id.pdf" ) { $n++; } 
	}
	if ( !$n ) { return ''; }
	my $w = $$opts{tex}{slide3h}{"width$n"};
	my $slide = '';
	for my $id (0..2) 
	{ 
		if ( !-e "$image.$id.pdf" ) { next; }
		$slide .= qq[\\includegraphics[type=pdf,ext=.pdf,read=.pdf,width=$w]{$image.$id}];
	}
	return qq[
			% $title
			%
			\\hslide{$title}{$slide}
		];
}

sub bignum
{
	my ($num) = @_;
	if ( !($num=~/^\d+$/) ) { return $num; }
	my $len = length($num);
	my $out;
	for (my $i=0; $i<$len; $i++)
	{
		$out .= substr($num,$i,1);
		if ( $i+1<$len && !(($len-$i-1)%3) ) { $out .= ','; }
	}
	return $out;
}

sub create_pdf
{
	my ($opts) = @_;

	chdir($$opts{dir});

	my @ids     = file_ids($opts);
	my $width   = "25.4cm";	# todo: move all this to $$opts{tex}
	my $height  = "19cm";
	my $height1 = "13cm";
	my $width1  = "23cm";
	my $width2  = @ids==3 ? "10.5cm" : "10.5cm";
	my $width3  = @ids==3 ? "8cm" : "15cm";
	my $ext     = "type=pdf,ext=.pdf,read=.pdf";
	my $args    = { ext=>$ext, width3=>$width3, n=>scalar @ids };

	# Check that xcolor is available
	my @has_xcolor = `kpsewhich xcolor.sty`;
	if ( !@has_xcolor )
	{
		warn("Note: The xcolor.sty package not available, black and white tables only...\n\n");
	}

	my $tex_file = "$$opts{lprefix}summary.tex";
	my $pdf_file = "$$opts{prefix}summary.pdf";
	open(my $tex,'>',$tex_file) or error("$tex_file: $!");
	iprint $tex, qq[
			% This file was produced by plot-vcfcheck, the command line was:
			%   $$opts{args}
			%
			% Edit as necessary and recreate the PDF by running
			%	pdflatex $tex_file
			%

			% Slides style and dimensions
			%
			\\nonstopmode
			\\documentclass[17pt]{memoir}
			\\setstocksize{$height}{$width}
			\\settrimmedsize{\\stockheight}{\\stockwidth}{*}
			\\settrims{0pt}{0pt}
			\\setlrmarginsandblock{1cm}{*}{*}
			\\setulmarginsandblock{1.5cm}{*}{*}
			\\setheadfoot{1mm}{1cm}
			\\setlength{\\parskip}{0pt}
			\\setheaderspaces{*}{1mm}{*}
			\\setmarginnotes{1mm}{1mm}{1mm}
			\\checkandfixthelayout[fixed]
			\\usepackage{charter}	% font
			\\pagestyle{plain}
			\\makeevenfoot{plain}{}{}{\\thepage}
			\\makeoddfoot{plain}{}{}{\\thepage}
			\\usepackage{graphicx}

			% For colored tables. If xcolor.sty is not available on your system,
			% download xcolor.sty.gz LaTeX class style from 
			%	http://www.ukern.de/tex/xcolor.html
			% Unpack and install system-wide or place elsewhere and make available by
			% setting the TEXINPUTS environment variable (note the colon)
			%	export TEXINPUTS=some/dir:
			% The list of the recognised path can be obtained by running `kpsepath tex`
			%
			\\usepackage{multirow}
			\\setlength{\\tabcolsep}{0.6em}
			\\renewcommand{\\arraystretch}{1.2}
		];
	if ( @has_xcolor )
	{
		iprint $tex, '\usepackage[table]{xcolor}';
	}
	else
	{
		iprint $tex, qq[
			\\newcommand{\\definecolor}[3]{}
			\\newcommand{\\columncolor}[1]{}
			\\newcommand{\\rowcolors}[4]{}
			\\newcommand{\\arrayrulecolor}[1]{}
		];
	}
	iprint $tex, qq[
			\\definecolor{hcol1}{rgb}{1,0.6,0}
			\\definecolor{hcol2}{rgb}{1,0.68,0.2}
			\\definecolor{row1}{rgb}{1,0.88,0.7}
			\\definecolor{row2}{rgb}{1,0.92,0.8}	% #FFEBCC
			\\setlength{\\arrayrulewidth}{1.5pt}

			% Slide headings
			\\newcommand*{\\head}[1]{{\\Large\\centerline{#1}\\vskip0.5em}}

			% Slide definition
			\\newcommand*{\\hslide}[2]{%
					\\head{#1}%
					\\begin{vplace}[0.5]\\centerline{#2}\\end{vplace}\\newpage}
			\\newcommand{\\pdf}[2]{\\IfFileExists{#2.pdf}{\\includegraphics[#1]{#2}}{}}


			% The actual slides
			\\begin{document}
		];


	# Table with summary numbers
	my $slide .= q[
            \begin{minipage}{\textwidth}\centering
            \small \rowcolors*{3}{row2}{row1} \arrayrulecolor{black}
            \begin{tabular}{l | r r | r r | r | r}
            \multicolumn{1}{>{\columncolor{hcol1}}l|}{}
            & \multicolumn{2}{>{\columncolor{hcol1}}c|}{SNPs}
            & \multicolumn{2}{>{\columncolor{hcol1}}c|}{indels}
            & \multicolumn{1}{>{\columncolor{hcol1}}c|}{MNPs}
            & \multicolumn{1}{>{\columncolor{hcol1}}c}{others}  \\\\
            %
            \multicolumn{1}{>{\columncolor{hcol2}}l|}{Callset}
            & \multicolumn{1}{>{\columncolor{hcol2}}c}{n}
            & \multicolumn{1}{>{\columncolor{hcol2}}c|}{ts/tv}
            & \multicolumn{1}{>{\columncolor{hcol2}}c}{n}
            & \multicolumn{1}{>{\columncolor{hcol2}}c|}{frm$^*$}
            & \multicolumn{1}{>{\columncolor{hcol2}}c|}{}
            & \multicolumn{1}{>{\columncolor{hcol2}}c}{} \\\\ \hline 
		];
	for my $id (@ids)
	{
		my $snps   = get_value($opts,$id,'number of SNPs:');
		my $indels = get_value($opts,$id,'number of indels:');
		my $mnps   = get_value($opts,$id,'number of MNPs:');
		my $others = get_value($opts,$id,'number of others:');
		my $tstv   = get_value($opts,$id,'ts/tv:');
		my @frsh   = get_values($opts,$id,'FS');
		my $frsh   = @frsh ? $frsh[0][2] : '--';
		my $title  = $$opts{title}{$id};
		$title =~ s/_/\\_/g;
		$slide .= qq[ $title & ] . bignum($snps) . qq[ & $tstv & ] . bignum($indels) . qq[ & $frsh & ] . bignum($mnps) . ' & ' . bignum($others) . qq[ \\\\ \n];
	}
    $slide .= q[%
        \multicolumn{7}{r}{$^*$ frm = Frameshift ratio} \\\\
        \end{tabular}
        \\\\ \vspace{1em}
        \begin{tabular}{l | r r r | r }
        \multicolumn{1}{>{\columncolor{hcol1}}l|}{}
        & \multicolumn{3}{>{\columncolor{hcol1}}c|}{singletons}
        & \multicolumn{1}{>{\columncolor{hcol1}}c}{multiallelic}  \\\\
        %
        \multicolumn{1}{>{\columncolor{hcol2}}l|}{Callset}
        & \multicolumn{1}{>{\columncolor{hcol2}}c}{SNPs}
        & \multicolumn{1}{>{\columncolor{hcol2}}c}{ts/tv} 
        & \multicolumn{1}{>{\columncolor{hcol2}}c|}{indels}
        & \multicolumn{1}{>{\columncolor{hcol2}}c}{sites} \\\\ \hline 
    ];
    for my $id (@ids)
    {
        my $snps  = get_value($opts,$id,'number of SNPs:');
        my $s     = singletons($opts,$id);
        my $mals  = get_value($opts,$id,'number of multiallelic sites:');
		my $title = $$opts{title}{$id};
		$title =~ s/_/\\_/g;
		$slide .= qq[ $title & $$s{snps}\\% & $$s{tstv} & $$s{indels}\\% &  ] . bignum($mals) . qq[ \\\\ \n];
    }
	$slide .= q[ \\end{tabular}\\end{minipage} ];
	iprint $tex, qq[
			% Table with summary numbers
			%
			\\hslide{Summary numbers}{$slide}
		
		];


	# Venn bars
	if ( @ids==3 )
	{
		iprint $tex, qq[%

			% Venn numbers
			%
			\\hslide{Total counts}{%
				\\includegraphics[$ext,width=$width2]{$$opts{lprefix}venn_bars.snps}%
				\\includegraphics[$ext,width=$width2]{$$opts{lprefix}venn_bars.indels}
			}
		];
	}

	iprint $tex, fmt_slide3v($opts, "$$opts{lprefix}tstv_by_sample", 'Ts/Tv by sample');
	iprint $tex, fmt_slide3v($opts, "$$opts{lprefix}hets_by_sample", 'Number of hets by sample');
	iprint $tex, fmt_slide3v($opts, "$$opts{lprefix}snps_by_sample", 'Number of SNPs by sample');
	iprint $tex, fmt_slide3v($opts, "$$opts{lprefix}indels_by_sample", 'Number of indels by sample');
	if ( scalar get_values($opts,2,'GCsS') ) 
	{ 
		iprint $tex, qq[
			% Genotype discordance by sample
			%
			\\hslide{Genotype discordance by sample}{\\pdf{$ext,width=$width1}{$$opts{lprefix}gts_by_sample}}
			
			]; 
	}
	if ( scalar get_values($opts,2,'GCsAF') ) 
	{
		my @vals = get_values($opts,2,'NRD');
		my $nrd = sprintf "%.2f", $vals[0][0];
		my $rr  = sprintf "%.2f", $vals[0][1];
		my $ra  = sprintf "%.2f", $vals[0][2];
		my $aa  = sprintf "%.2f", $vals[0][3];
		my $nsamples = get_value($opts,2,'Number of samples:');
		my $table = qq[%
			{\\small
			\\rowcolors*{1}{row2}{row1}\\arrayrulecolor{black}
			\\begin{tabular}{c | c | c | c }
			\\multicolumn{1}{>{\\columncolor{hcol1}}c|}{REF/REF} & 
			\\multicolumn{1}{>{\\columncolor{hcol1}}c|}{REF/ALT} & 
			\\multicolumn{1}{>{\\columncolor{hcol1}}c|}{ALT/ALT} & 
			\\multicolumn{1}{>{\\columncolor{hcol1}}c}{NRD} \\\\ \\hline
			$rr\\% & $ra\\% & $aa\\% & $nrd\\% \\\\
			\\end{tabular}}];
		iprint $tex, qq[
				% Genotype discordance by AF
				%
				\\head{Genotype discordance by AF}\\begin{vplace}[0.7]\\centerline{$table}%
				\\centerline{\\pdf{$ext,height=$height1}{$$opts{lprefix}gts_by_af}}\\end{vplace}
				\\newpage
			];
	}
	iprint $tex, qq[
		% SNP and indel counts by AF
		%
		\\hslide{}{\\vbox{\\noindent\\includegraphics[$ext,width=$width1]{$$opts{lprefix}counts_by_af.snps}\\\\%
			\\noindent\\includegraphics[$ext,width=$width1]{$$opts{lprefix}counts_by_af.indels}}}
		];
	iprint $tex, fmt_slide3h($opts, "$$opts{lprefix}tstv_by_af", 'Ts/Tv by AF');
	#iprint $tex, fmt_slide3h($opts, "$$opts{lprefix}tstv_by_qual", 'Ts/Tv by QUAL');
	iprint $tex, fmt_slide3h($opts, "$$opts{lprefix}indels", 'Indel distribution');
	iprint $tex, fmt_slide3h($opts, "$$opts{lprefix}depth", 'Depth distribution');
	iprint $tex, fmt_slide3h($opts, "$$opts{lprefix}substitutions", 'Substitution types');

	iprint $tex, "\n\n\\end{document}\n";
	close($tex);

	$tex_file =~ s{^.+/}{};
	my $cmd = "pdflatex $tex_file >$$opts{logfile} 2>&1";
	print STDERR "Creating PDF: $cmd\n" unless !$$opts{verbose};
	system($cmd);
	if ( $? ) { error("The command exited with non-zero status, please consult the output of pdflatex: $$opts{dir}$$opts{logfile}\n\n"); }
	print STDERR "Finished: $pdf_file\n" unless !$$opts{verbose};
}


