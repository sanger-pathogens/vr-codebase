#!/usr/bin/env perl
#
# release_platforms.pl --lanes lanes.fofn --db g1k_meta --previous .release_hierarchy_made > out
#
# Given the paths to all the lane directories that would be needed to
# build sample-level release bams (as generated by release_lanes.pl), work out
# which sample platforms have changed since the previous release. 
#
# Author: Sendu Bala <bix@sendu.me.uk>
#

use strict;
use warnings;
use File::Basename;
use Getopt::Long;
use File::Spec;
use VertRes::Utils::Hierarchy;
use VertRes::Utils::VRTrackFactory;
use VRTrack::Lane;
use VRTrack::History;

# get user input
my ($help, $database, $lanes_fofn, $previous, $date);
my $spinner = 0;
GetOptions('db=s'              => \$database,
           'lanes=s'           => \$lanes_fofn,
           'previous=s'        => \$previous,
           'date=s'            => \$date,
           'h|help'            => \$help);

my $missing_opts = 0;
unless ($database && $lanes_fofn && $previous) {
    $missing_opts = 1;
}

($help || $missing_opts) and die <<USAGE;
Prints out the status of platforms, indicating which ones need (re)merging.

Usage: $0 --db my_vrtrack_meta
        --lanes            <lanes.fofn> the output of release_lanes.pl
        --db               <database name>
        --previous         <.release_hierarchy_made> the list of lane bam files
                                                     made by the Release
                                                     pipeline
        --date             '2010-02-04 23:59:59' pretend you ran this script at
                                                 this point in time
        --help             this message

USAGE

# travel back in time?
my $hist = VRTrack::History->new();
$hist->time_travel($date) if $date;
my $vrtrack = VertRes::Utils::VRTrackFactory->instantiate(database => $database, mode => "r");
my $hu = VertRes::Utils::Hierarchy->new();

my %platforms_status = $hu->new_platforms($previous,
                                          $lanes_fofn,
                                          vrtrack => $vrtrack,
                                          slx_mapper => 'bwa',
                                          '454_mapper' => 'ssaha',
                                          assembly_name => 'NCBI37');

while (my ($project, $samphash) = each %platforms_status) {
    while (my ($sample, $plathash) = each %{$samphash}) {
        while (my ($platform, $stathash) = each %{$plathash}) {
            my @bams = @{$stathash->{bams}};
            print join("\t", $project, $sample, $platform, $stathash->{changed}, @bams), "\n";
        }
    }
}

exit;
